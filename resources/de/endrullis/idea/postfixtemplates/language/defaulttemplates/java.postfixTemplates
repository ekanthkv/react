## number conversions ##

.toBoolean : convert to boolean
	java.lang.String         →  Boolean.parseBoolean($expr$)

.toByte : convert to byte
	java.lang.String         →  Byte.parseByte($expr$)
	java.lang.Number         →  $expr$.byteValue()
	NUMBER                   →  ((byte) ($expr$))

.toShort : convert to short
	java.lang.String         →  Short.parseShort($expr$)
	java.lang.Number         →  $expr$.shortValue()
	NUMBER                   →  ((short) ($expr$))

.toChar : convert to char
	java.lang.String         →  $expr$.charAt(0)
	NUMBER                   →  ((char) ($expr$))

.toInt : convert to int
	java.lang.String         →  Integer.parseInt($expr$)
	java.lang.Number         →  $expr$.intValue()
	NUMBER                   →  ((int) ($expr$))

.toLong : convert to long
	java.lang.String         →  Long.parseLong($expr$)
	java.lang.Number         →  $expr$.longValue()
	NUMBER                   →  ((long) ($expr$))

.toFloat : convert to float
	java.lang.String         →  Float.parseFloat($expr$)
	java.lang.Number         →  $expr$.floatValue()
	NUMBER                   →  ((float) ($expr$))

.toDouble : convert to double
	java.lang.String         →  Double.parseDouble($expr$)
	java.lang.Number         →  $expr$.doubleValue()
	NUMBER                   →  ((double) ($expr$))

.format : format number
	BYTE                     →  String.format("$format::"%d"$", $expr$)
	SHORT                    →  String.format("$format::"%d"$", $expr$)
	CHAR                     →  String.format("$format::"%c"$", $expr$)
	INT                      →  String.format("$format::"%d"$", $expr$)
	LONG                     →  String.format("$format::"%d"$", $expr$)
	FLOAT                    →  String.format("$format::"%f"$", $expr$)
	DOUBLE                   →  String.format("$format::"%f"$", $expr$)
	java.lang.String         →  String.format($expr$, $END$)



## collection conversions ##

.toList : convert to List
	ARRAY                    →  java.util.Arrays.asList($expr$)
	java.util.Collection     →  new java.util.ArrayList<>($expr$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toList())
	java.util.Map            →  new ArrayList<>($expr$.entrySet())
	java.util.Optional       →  $expr$.map(e -> Collections.singletonList(e)).orElse(Collections.emptyList())
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.toList())

.toSet : convert to Set
	ARRAY                    →  java.util.stream.Stream.of($expr$).collect(java.util.stream.Collectors.toSet())
	java.util.Collection     →  new java.util.HashSet<>($expr$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toSet())
	java.util.Map            →  $expr$.entrySet()
	java.util.Optional       →  $expr$.map(e -> Collections.singleton(e)).orElse(Collections.emptySet())
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.toSet())

.toMap : convert to Map
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.util.Collection     →  $expr$.stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))

.toOptional : wrap in Otional
	NON_VOID                 →  Optional.ofNullable($expr$)

.stream : convert to Stream
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false)



## collection iterations ##

.for : iterate over ...
	ITERABLE_OR_ARRAY → for ($ELEMENT_TYPE:iterableComponentType(expr):"java.lang.Object"$ $VAR:suggestVariableName()$ : $expr$) {\
	  $END$\
	}
	java.util.Enumeration → while($expr$.hasMoreElements()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.nextElement();\
	  $END$\
	}
	java.util.Iterator → while($expr$.hasNext()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.next();\
	  $END$\
	}

.iter : iterate over ...
	ITERABLE_OR_ARRAY → for ($ELEMENT_TYPE:iterableComponentType(expr):"java.lang.Object"$ $VAR:suggestVariableName()$ : $expr$) {\
	  $END$\
	}
	java.util.Enumeration → while($expr$.hasMoreElements()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.nextElement();\
	  $END$\
	}
	java.util.Iterator → while($expr$.hasNext()) {\
	  $TYPE:rightSideType():"Object"$ $VAR:suggestVariableName()$ = $CAST*:castToLeftSideType()$ $expr$.next();\
	  $END$\
	}



## collection operations ##

.sort : sort naturally
	ARRAY                    →  java.util.Arrays.sort($expr$)
	java.util.List           →  java.util.Collections.sort($expr$)

.sortBy : sort by attribute
	ARRAY                    →  java.util.Arrays.sort($expr$, java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.List           →  $expr$.sort(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.sorted(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))

.minBy : minimum by attribute
	ARRAY                    →  java.util.Arrays.stream($expr$).min(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.Collection     →  $expr$.stream().min(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).min(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.min(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))

.maxBy : maximum by attribute
	ARRAY                    →  java.util.Arrays.stream($expr$).max(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.Collection     →  $expr$.stream().max(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).max(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.max(java.util.Comparator.comparing($attributeVar*:suggestShortVariableName()$ -> $attribute$))

.groupBy : group by attribute
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.groupingBy($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.Collection     →  $expr$.stream().collect(java.util.stream.Collectors.groupingBy($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.groupingBy($attributeVar*:suggestShortVariableName()$ -> $attribute$))
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.groupingBy($attributeVar*:suggestShortVariableName()$ -> $attribute$))

.exists : any match
	ARRAY                    →  java.util.Arrays.stream($expr$).anyMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)
	java.util.Collection     →  $expr$.stream().anyMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).anyMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)
	java.util.stream.Stream  →  $expr$.anyMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)

.forall : all match
	ARRAY                    →  java.util.Arrays.stream($expr$).allMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)
	java.util.Collection     →  $expr$.stream().allMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).allMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)
	java.util.stream.Stream  →  $expr$.allMatch($conditionVar*:suggestShortVariableName()$ -> $condition$)

.reverse : reverse collection
	ARRAY [org.apache.commons.lang.ArrayUtils] →  org.apache.commons.lang.ArrayUtils.reverse($expr$)
	java.util.List           →  java.util.Collections.reverse($expr$)
	java.lang.String         →  new StringBuilder($expr$).reverse().toString()

.concat : concat
	ARRAY                    →  java.util.stream.Stream.concat(java.util.Arrays.stream($expr$), $stream$)
	java.util.Collection     →  java.util.stream.Stream.concat($expr$.stream(), $stream$)
	java.util.stream.Stream  →  java.util.stream.Stream.concat($expr$, $stream$)

.forEach : for each
	ARRAY                    →  java.util.Arrays.stream($expr$).forEach($actionVar*:suggestShortVariableName()$ -> $END$)
	java.util.Optional       →  $expr$.ifPresent($actionVar*:suggestShortVariableName()$ -> $END$)

.mkString : make a string
	ARRAY                    →  java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.joining($separator$))
	java.util.Collection     →  $expr$.stream().collect(java.util.stream.Collectors.joining($separator$))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.joining($separator$))
	java.util.stream.Stream  →  $expr$.collect(java.util.stream.Collectors.joining($separator$))

.map : map entries
	java.util.List           →  $expr$.stream().map($fVar*:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toList())
	java.util.Set            →  $expr$.stream().map($fVar*:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toSet())
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> $value$))

.flatMap : map entries
	java.util.List           →  $expr$.stream().flatMap($fVar*:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toList())
	java.util.Set            →  $expr$.stream().flatMap($fVar*:suggestShortVariableName()$ -> $f$).collect(java.util.stream.Collectors.toSet())

.mapKeys : map keys
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> $key$, e -> e.getValue()))

.mapValues : map values
	java.util.Map            →  $expr$.entrySet().stream().collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> $value$))

.getOrElseUpdate : get or else update
	java.util.Map            →  $expr$.computeIfAbsent($key$, e -> $value$)

.filter : filter map entries
	java.util.List           →  $expr$.stream().filter($conditionVar*:suggestShortVariableName()$ -> $condition$).collect(java.util.stream.Collectors.toList())
	java.util.Set            →  $expr$.stream().filter($conditionVar*:suggestShortVariableName()$ -> $condition$).collect(java.util.stream.Collectors.toSet())
	java.util.Map            →  $expr$.entrySet().stream().filter($conditionVar*:suggestShortVariableName()$ -> $condition$).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()))
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).collect(java.util.stream.Collectors.toList())

.reduce : reduce
	ARRAY                    →  java.util.Arrays.stream($expr$).reduce((a, b) -> $accumulator$)
	java.util.Collection     →  $expr$.stream().reduce((a, b) -> $accumulator$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).reduce((a, b) -> $accumulator$)

.fold : fold
	ARRAY                    →  java.util.Arrays.stream($expr$).reduce($neutralElement$, (a, b) -> $accumulator$)
	java.util.Collection     →  $expr$.stream().reduce($neutralElement$, (a, b) -> $accumulator$)
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).reduce($neutralElement$, (a, b) -> $accumulator$)
	java.util.stream.Stream  →  $expr$.reduce($neutralElement$, (a, b) -> $accumulator$)

.find : find element
	ARRAY                    →  java.util.Arrays.stream($expr$).filter($conditionVar*:suggestShortVariableName()$ -> $condition$).findFirst()
	java.util.Collection     →  $expr$.stream().filter($conditionVar*:suggestShortVariableName()$ -> $condition$).findFirst()
	java.lang.Iterable       →  java.util.stream.StreamSupport.stream($expr$.spliterator(), false).filter($conditionVar*:suggestShortVariableName()$ -> $condition$).findFirst()
	java.util.stream.Stream  →  $expr$.filter($conditionVar*:suggestShortVariableName()$ -> $condition$).findFirst()

.take : take a certain number of elements
	java.util.stream.Stream  →  $expr$.limit($intValue$)

.drop : drop a certain number of elements
	java.util.stream.Stream  →  $expr$.skip($intValue$)

.size : size of collection
	ARRAY                    →  $expr$.length

.get : get element
	ARRAY                    →  $expr$[$i$]

.isEmpty : null-safe isEmpty check
	java.util.Collection [org.apache.commons.collections4.CollectionUtils]   →  org.apache.commons.collections4.CollectionUtils.isEmpty($expr$)
	java.util.Map        [org.apache.commons.collections4.MapUtils]          →  org.apache.commons.collections4.MapUtils.isEmpty($expr$)
	java.lang.String     [org.apache.commons.lang3.StringUtils]              →  org.apache.commons.lang3.StringUtils.isEmpty($expr$)

.isNotEmpty : null-safe isNotEmpty check
	java.util.Collection [org.apache.commons.collections4.CollectionUtils]   →  org.apache.commons.collections4.CollectionUtils.isNotEmpty($expr$)
	java.util.Map        [org.apache.commons.collections4.MapUtils]          →  org.apache.commons.collections4.MapUtils.isNotEmpty($expr$)
	java.lang.String     [org.apache.commons.lang3.StringUtils]              →  org.apache.commons.lang3.StringUtils.isNotEmpty($expr$)

.isBlank : StringUtils.isBlank()
	java.lang.String [org.apache.commons.lang3.StringUtils]   →  org.apache.commons.lang3.StringUtils.isBlank($expr$)

.isNotBlank : StringUtils.isNotBlank()
	java.lang.String [org.apache.commons.lang3.StringUtils]   →  org.apache.commons.lang3.StringUtils.isNotBlank($expr$)



## function applications ##

.apply : apply the function
	java.lang.Runnable                    →  $expr$.run()
	java.util.function.Supplier           →  $expr$.get()
	java.util.function.BooleanSupplier    →  $expr$.getAsBoolean()
	java.util.function.DoubleSupplier     →  $expr$.getAsDouble()
	java.util.function.IntSupplier        →  $expr$.getAsInt()
	java.util.function.LongSupplier       →  $expr$.getAsLong()
	java.util.function.Consumer           →  $expr$.accept($object$)
	java.util.function.BiConsumer         →  $expr$.accept($object$, $object$)
	java.util.function.DoubleConsumer     →  $expr$.accept($doubleValue$)
	java.util.function.IntConsumer        →  $expr$.accept($intValue$)
	java.util.function.LongConsumer       →  $expr$.accept($longValue$)
	java.util.function.ObjDoubleConsumer  →  $expr$.accept($object$, $doubleValue$)
	java.util.function.ObjIntConsumer     →  $expr$.accept($object$, $intValue$)
	java.util.function.ObjLongConsumer    →  $expr$.accept($object$, $longValue$)
	java.util.function.Predicate          →  $expr$.test($object$)
	java.util.function.BiPredicate        →  $expr$.test($object$, $object$)
	java.util.function.DoublePredicate    →  $expr$.test($doubleValue$)
	java.util.function.IntPredicate       →  $expr$.test($intValue$)
	java.util.function.LongPredicate      →  $expr$.test($longValue$)



## I/O ##

.toFile : get file
	java.lang.String         →  new java.io.File($expr$)

.toURL : get URL
	java.lang.String         →  new java.net.URL($expr$)

.lines : get lines
	java.io.File             →  java.nio.file.Files.readAllLines($expr$.toPath(), java.nio.charset.Charset.forName($encoding::"\"UTF-8\""$))
	java.nio.file.Path       →  java.nio.file.Files.readAllLines($expr$, java.nio.charset.Charset.forName($encoding::"\"UTF-8\""$))
	java.lang.String         →  $expr$.split("\\r?\\n")
	java.io.InputStream      →  new java.io.BufferedReader(new java.io.InputStreamReader($expr$)).lines()

.content : get content
	java.io.File             →  new String(java.nio.file.Files.readAllBytes($expr$.toPath()), $encoding::"\"UTF-8\""$)
	java.nio.file.Path       →  new String(java.nio.file.Files.readAllBytes($expr$), $encoding::"\"UTF-8\""$)
	java.io.InputStream      →  new java.util.Scanner($expr$, $encoding::"\"UTF-8\""$).useDelimiter("\\\\A").next()
	java.net.URL             →  new java.util.Scanner($expr$.openStream(), $encoding::"\"UTF-8\""$).useDelimiter("\\\\A").next()

.inputStream : get input stream
	java.lang.String         →  new java.io.ByteArrayInputStream($expr$.getBytes())
	java.io.File             →  new java.io.FileInputStream($expr$)
	java.net.URL             →  $expr$.openStream()

.outputStream : get output stream
	java.io.File             →  new java.io.FileOutputStream($expr$)

.bufferedReader : get BufferedReader
	java.io.File             →  new java.io.BufferedReader(new java.io.FileReader($expr$))
	java.io.InputStream      →  new java.io.BufferedReader(new java.io.InputStreamReader($expr$))
	java.net.URL             →  new java.io.BufferedReader(new java.io.InputStreamReader($expr$.openStream()))

.bufferedWriter : get BufferedWriter
	java.io.File             →  new java.io.BufferedWriter(new java.io.FileWriter($expr$))
	java.io.OutputStream     →  new java.io.BufferedWriter(new java.io.OutputStreamWriter($expr$))

.printStream : get PrintStream
	java.io.File             →  new java.io.PrintStream($expr$)
	java.io.OutputStream     →  new java.io.PrintStream($expr$)

.run : run shell command
	java.lang.String         →  java.lang.Runtime.getRuntime().exec($expr$)



## others ##

.new : new instance
	CLASS                    →  new $expr$($END$)

.r : compile pattern
	java.lang.String         →  java.util.regex.Pattern.compile($expr$)

.val : extract as value
	NON_VOID [lombok.val]    →  val $var:suggestVariableName()$ = $expr$;
	NON_VOID                 →  final $type*:expressionType(expr))$ $var:suggestVariableName()$ = $expr$;

.sout : print variable to System.out
	ARRAY                    →  System.out.println(java.util.Arrays.toString($expr$));
	NON_VOID                 →  System.out.println($expr$);

.soutv : print variable to System.out
	ARRAY                    →  System.out.println("$expr$ = " + java.util.Arrays.toString($expr$));
	NON_VOID                 →  System.out.println("$expr$ = " + $expr$);



## IDEA development templates ##

.toVirtualFile : as virtual file
	java.io.File [com.intellij.openapi.vfs.VirtualFile]  →  com.intellij.openapi.vfs.LocalFileSystem.getInstance().findFileByIoFile($expr$)

.toFile : as file
	com.intellij.openapi.vfs.VirtualFile  →  new java.io.File($expr$.getPath())

.getAttributes : get file attributes
	com.intellij.openapi.vfs.VirtualFile  →  com.intellij.openapi.vfs.LocalFileSystem.getInstance().getAttributes($expr$)

.openInEditor : open file in editor
	com.intellij.openapi.vfs.VirtualFile  →  new com.intellij.openapi.fileEditor.OpenFileDescriptor($project:variableOfType("com.intellij.openapi.project.Project")$, $expr$).navigate(true)

.getVirtualFile : get virtual file
	com.intellij.openapi.editor.Document  →  com.intellij.openapi.fileEditor.FileDocumentManager.getInstance().getFile($expr$)

.getDocument : get document
	com.intellij.psi.PsiFile              →  com.intellij.psi.PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project"):concat(expr, ".getProject()")$).getDocument($expr$)
	com.intellij.psi.PsiElement           →  com.intellij.psi.PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project"):concat(expr, ".getProject()")$).getDocument($expr$.getContainingFile())
	com.intellij.openapi.vfs.VirtualFile  →  com.intellij.psi.PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).getDocument(com.intellij.psi.PsiManager.getInstance($project*$).findFile($expr$))
	com.intellij.openapi.fileEditor.FileEditor  →  com.intellij.psi.PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).getDocument(com.intellij.psi.PsiManager.getInstance($project*$).findFile($expr$.getFile()))

.getPsiFile : get PSI file
	com.intellij.openapi.vfs.VirtualFile  →  com.intellij.psi.PsiManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findFile($expr$)
	com.intellij.openapi.editor.Document  →  com.intellij.psi.PsiDocumentManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).getPsiFile($expr$)
	com.intellij.openapi.fileEditor.FileEditor  →  com.intellij.psi.PsiManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findFile($expr$.getFile())

.getPsiJavaFile : get PSI Java file
	com.intellij.psi.PsiClass             →  ((com.intellij.psi.PsiJavaFile) $expr$.getContaningFile())

.getPsiPackage : get PSI package
	com.intellij.psi.PsiClass             →  com.intellij.psi.JavaPsiFacade.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findPackage(((com.intellij.psi.PsiJavaFile) $expr$.getContaningFile()).getPackageName())
	com.intellij.psi.PsiJavaFile          →  com.intellij.psi.JavaPsiFacade.getInstance($project:variableOfType("com.intellij.openapi.project.Project")$).findPackage($expr$.getPackageName())

.getChildrenOfType : get children of certain type
	com.intellij.psi.PsiElement           →  com.intellij.psi.util.PsiTreeUtil.getChildrenOfType($expr$, $class$)

.getModule : get Module
	com.intellij.openapi.vfs.VirtualFile  →  com.intellij.openapi.roots.ProjectRootManager.getInstance($project:variableOfType("com.intellij.openapi.project.Project"):concat(expr, ".getProject()")$).getFileIndex().getModuleForFile($expr$)

.getProject : get Project
	com.intellij.openapi.actionSystem.DataContext  →  com.intellij.openapi.actionSystem.DataKeys.PROJECT.getData($expr$)

.getFileEditorManager : get FileEditorManager
	com.intellij.openapi.project.Project  →  com.intellij.openapi.fileEditor.FileEditorManager.getInstance($expr$)

.getPsiManager : get PsiManager
	com.intellij.openapi.project.Project  →  com.intellij.psi.PsiManager.getInstance($expr$)

.getPsiFileFactory : get PsiFileFactory
	com.intellij.openapi.project.Project  →  com.intellij.psi.PsiFileFactory.getInstance($expr$)

.getProjectRootManager : get ProjectRootManager
	com.intellij.openapi.project.Project  →  com.intellij.openapi.roots.ProjectRootManager.getInstance($expr$)

.getTemplateManager : get TemplateManager
	com.intellij.openapi.project.Project  →  com.intellij.codeInsight.template.TemplateManager.getInstance($expr$)

.getJavaPsiFacade : get JavaPsiFacade
	com.intellij.openapi.project.Project  →  com.intellij.psi.JavaPsiFacade.getInstance($expr$)

.runReadAction : runWriteAction(...)
	ANY [com.intellij.openapi.application.Application]  →  com.intellij.openapi.application.ApplicationManager.getApplication().runReadAction(() -> {\
	                                                         $expr$$END$\
	                                                       });

.runWriteAction : runWriteAction(...)
	ANY [com.intellij.openapi.application.Application]  →  com.intellij.openapi.application.ApplicationManager.getApplication().runWriteAction(() -> {\
	                                                         $expr$$END$\
	                                                       });

.invokeLater : invokeLater(...)
	ANY [com.intellij.openapi.application.Application]  →  com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(() -> {\
	                                                         $expr$$END$\
	                                                       });

.showDiff : show diff
	java.lang.String [com.intellij.diff.DiffManager]  →  com.intellij.diff.DiffManager.getInstance().showDiff($project:variableOfType("com.intellij.openapi.project.Project")$, new SimpleDiffRequest("$title::"Diff Title"$",\
	                                                       com.intellij.diff.DiffContentFactory.getInstance().create($expr$),\
	                                                       com.intellij.diff.DiffContentFactory.getInstance().create($content2::"content2"$),\
	                                                       "$leftTitle::"Left side"$", "$rightTitle::"Right side"$", "$title::"Diff Title"$");
